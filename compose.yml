services:
  postgres:
    image: postgres
    container_name: time_manager_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db-data:/var/lib/postgresql/data
    ports: 
      - 5432:5432
    networks:
      - back-end
  
  adminer:
    image: adminer
    container_name: time_manager_adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - back-end

  vue:
    image: corentinjs/t-poo-700-stg2-frontend:latest
    container_name: time_manager_frontend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
    ports:
      - 5173:8080
    depends_on:
      - postgres
    networks:
      - front-end
      - back-end

  phoenix:
    image: corentinjs/t-poo-700-stg2-api:latest
    container_name: time_manager_phoenix
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
    ports:
      - 4000:4000
    depends_on:
      - postgres
    networks:
      - back-end

  watchtower:
    image: containrrr/watchtower
    container_name: time_manager_watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_POLL_INTERVAL: 30
      WATCHTOWER_LABEL_ENABLE: 1

networks:
  front-end:
  back-end:
